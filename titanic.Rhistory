theme_set(theme_classic())
g <- ggplot(titanic_train_clean, aes(Age)) +
geom_density(aes(fill=Sex), alpha=0.8) +
labs(title = "Density plot for Age",subtitle = "Discriminated by gender")
plot(g)
hist(titanic_train_clean$SibSp)
hist(titanic_train_clean$Parch)
hist(titanic_train_clean$Fare)
library(caret)
preObj <- preProcess(titanic_train_clean[,c("Age","SibSp","Parch","Fare")], method = c("center","scale", "BoxCox", "knnImpute"))
# sibsbstd <- predict(preObj, titanic_train_clean[,c(6,7,8,9)])$SibSp
titanic_train_transformed <- predict(preObj, newdata = titanic_train_clean[,c("Age","SibSp","Parch","Fare")])
titanic_train_scaled <- cbind(titanic_train_clean[,c("PassengerId","Pclass","Sex","Embarked", "Survived")], titanic_train_transformed)
titanic_train_scaled$Survived <- as.factor(titanic_train_scaled$Survived)
titanic_train_scaled$Pclass <- as.factor(titanic_train_scaled$Pclass)
titanic_test_transformed <- predict(preObj, titanic_test[,c("Age","SibSp","Parch","Fare")])
titanic_test_scaled <- cbind(titanic_test[,c("PassengerId","Pclass","Sex","Embarked")], titanic_test_transformed)
titanic_test_scaled$Pclass <- as.factor(titanic_test_scaled$Pclass)
set.seed(112233)
default_glm_mod = train(form = Survived ~ .,
data = titanic_train_scaled,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial")
default_glm_mod
set.seed(112233)
library(parallel)
no_cores <- detectCores() - 1
library(doParallel)
cl <- makePSOCKcluster(no_cores)
registerDoParallel(cl)
grid_default <- expand.grid(
nrounds = 100,
max_depth = 4,
eta = 0.025,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
train_control <- caret::trainControl(
method = "none",
verboseIter = FALSE, # no training log
allowParallel = TRUE # FALSE for reproducible results
)
xgb_base <- caret::train(
form = Survived ~ .,
data = titanic_train_scaled,
trControl = train_control,
tuneGrid = grid_default,
method = "xgbTree",
verbose = TRUE
)
stopCluster(cl)
xgb_base$bestTune
survived_pred_xgb <- predict(xgb_base, newdata = titanic_test_scaled)
survived_pred_xgb <- ifelse(survived_pred_xgb == 1, "0", "1")
xgb_default_to_kaggle <- data.frame(PassengerId=titanic_test_scaled$PassengerId,
Survived=survived_pred_xgb,
stringsAsFactors = TRUE)
write.csv(xgb_default_to_kaggle, file = "results/xgb_default.csv", row.names=FALSE, append = FALSE)
set.seed(112233)
library(parallel)
# Calculate the number of cores
no_cores <- detectCores() - 1
library(doParallel)
cl <- makePSOCKcluster(no_cores)
registerDoParallel(cl)
default_rf_mod <- train(form = Survived ~ .,
data = titanic_train_scaled,
method = "rf",
prox = TRUE)
stopCluster(cl)
default_rf_mod
survived_pred_rf <- predict(default_rf_mod, newdata = titanic_test_scaled)
survived_pred_rf <- ifelse(survived_pred_rf == 1, "0", "1")
rf_default_to_kaggle <- data.frame(PassengerId=titanic_test_scaled$PassengerId,
Survived=survived_pred_rf,
stringsAsFactors = TRUE)
write.csv(rf_default_to_kaggle, file = "results/rf_default.csv", row.names=FALSE, append = FALSE)
set.seed(112233)
library(parallel)
# Calculate the number of cores
no_cores <- detectCores() - 1
library(doParallel)
cl <- makePSOCKcluster(no_cores)
registerDoParallel(cl)
default_rfcv_mod <- train(form = Survived ~ .,
data = titanic_train_scaled,
method = "rf",
trControl= trainControl(method = "LOOCV", p = 0.1, allowParallel = TRUE),
prox = TRUE)
default_rfcv_mod
stopCluster(cl)
set.seed(112233)
library(parallel)
# Calculate the number of cores
no_cores <- detectCores() - 1
library(doParallel)
cl <- makePSOCKcluster(no_cores)
registerDoParallel(cl)
default_rfcv_mod <- train(form = Survived ~ .,
data = titanic_train_scaled,
method = "rf",
trControl= trainControl(method = "LOOCV", p = 0.1, allowParallel = TRUE),
prox = TRUE)
default_rfcv_mod
stopCluster(cl)
View(titanic_test_scaled)
View(titanic_test_scaled)
survived_pred_rfloocv <- predict(default_rf_mod, newdata = titanic_test_scaled)
survived_pred_rfloocv <- ifelse(survived_pred_rfloocv == 1, "0", "1")
rf_default_to_kaggle <- data.frame(PassengerId=titanic_test_scaled$PassengerId,
Survived=survived_pred_rfloocv,
stringsAsFactors = TRUE)
write.csv(rfloocv_default_to_kaggle, file = "results/rf_loocv_default.csv", row.names=FALSE, append = FALSE)
survived_pred_rfloocv <- predict(default_rf_mod, newdata = titanic_test_scaled)
survived_pred_rfloocv <- ifelse(survived_pred_rfloocv == 1, "0", "1")
rfloocv_default_to_kaggle <- data.frame(PassengerId=titanic_test_scaled$PassengerId,
Survived=survived_pred_rfloocv,
stringsAsFactors = TRUE)
write.csv(rfloocv_default_to_kaggle, file = "results/rf_loocv_default.csv", row.names=FALSE, append = FALSE)
library(caret)
titanic_train_clean <- titanic_train_clean[,-"Age"]
library(caret)
titanic_train_clean <- titanic_train_clean[-c("Age")]
library(caret)
titanic_train_clean <- titanic_train_clean[,-c("Age")]
library(caret)
titanic_train_clean <- subset( titanic_train_clean, select =-c("Age"))
library(caret)
titanic_train_clean <- subset( titanic_train_clean, select =-c("Age"))
library(caret)
titanic_train_clean <- subset( titanic_train_clean, select =-"Age")
library(caret)
titanic_train_clean <- subset( titanic_train_clean, select =-Age)
preObj <- preProcess(titanic_train_clean[,c("SibSp","Parch","Fare")], method = c("center","scale", "BoxCox", "knnImpute"))
titanic_test <- subset( titanic_test, select =-Age)
titanic_test_transformed <- predict(preObj, titanic_test[,c("SibSp","Parch","Fare")])
titanic_test_scaled <- cbind(titanic_test[,c("PassengerId","Pclass","Sex","Embarked")], titanic_test_transformed)
titanic_test_scaled$Pclass <- as.factor(titanic_test_scaled$Pclass)
knitr::opts_chunk$set(echo = TRUE)
unzip("data/titanic.zip", list = TRUE)
create_files <- function (fname,...) {
try(expr = read.csv(unzip(zipfile = ..., files = c(fname))),silent = TRUE);
}
extract_file_names <- function (names) {
setNames((unlist(strsplit(apply(names, MARGIN = c(1), function(r) r[1]), " "))), NULL)
}
create_df_from_zip_file <- function(file_name) {
if(file.exists(file_name)) {
files_from_kaggle <- unzip(file_name, list = TRUE)
names <- extract_file_names(files_from_kaggle)
dfs <- lapply(names, create_files, file_name)
dfs
}
}
dfs <- create_df_from_zip_file("data/titanic.zip")
if (dim(dfs[[1]])[2] == 2) { saveRDS(object = dfs[[3]], file = "data/sample_submission.rds")}
if (dim(dfs[[2]])[2] == 11) { saveRDS(object = dfs[[2]], file = "data/test.rds")}
if (dim(dfs[[3]])[2] == 12) { saveRDS(object = dfs[[3]], file = "data/train.rds")}
rm(dfs)
rm('create_files')
rm('extract_file_names')
rm('create_df_from_zip_file')
titanic_train <- readRDS("data/train.rds")
titanic_test <- readRDS("data/test.rds")
out1<-paste0("Train data is ", dim(titanic_train)[1], " rows by ", dim(titanic_train)[2], " columns")
out2<-paste0("Test data is ", dim(titanic_test)[1], " rows by ", dim(titanic_test)[2], " columns")
print(out1)
print(out2)
titanic_train_clean <- titanic_train[complete.cases(titanic_train), ]
dim(titanic_train_clean)
library(ggplot2)
theme_set(theme_classic())
g <- ggplot(titanic_train_clean, aes(x=Survived, y=Age, fill= Sex)) +
geom_bar(stat="identity", width = 0.75, position = "dodge") +
labs(title = "Bar plot for age and survivor status",subtitle = "Discriminated by gender")
plot(g)
knitr::include_graphics('./img/Rattle-HistSurvivedByGender.png')
knitr::include_graphics('./img/Rattle-KMeansclustering.png')
library(ggplot2)
theme_set(theme_classic())
g <- ggplot(titanic_train_clean, aes(Age)) +
geom_density(aes(fill=Sex), alpha=0.8) +
labs(title = "Density plot for Age",subtitle = "Discriminated by gender")
plot(g)
hist(titanic_train_clean$SibSp)
hist(titanic_train_clean$Parch)
hist(titanic_train_clean$Fare)
library(caret)
titanic_train_clean <- subset( titanic_train_clean, select =-Age)
preObj <- preProcess(titanic_train_clean[,c("SibSp","Parch","Fare")], method = c("center","scale", "BoxCox", "knnImpute"))
# sibsbstd <- predict(preObj, titanic_train_clean[,c(6,7,8,9)])$SibSp
titanic_train_transformed <- predict(preObj, newdata = titanic_train_clean[,c("SibSp","Parch","Fare")])
titanic_train_scaled <- cbind(titanic_train_clean[,c("PassengerId","Pclass","Sex","Embarked", "Survived")], titanic_train_transformed)
titanic_train_scaled$Survived <- as.factor(titanic_train_scaled$Survived)
titanic_train_scaled$Pclass <- as.factor(titanic_train_scaled$Pclass)
titanic_test <- subset( titanic_test, select =-Age)
titanic_test_transformed <- predict(preObj, titanic_test[,c("SibSp","Parch","Fare")])
titanic_test_scaled <- cbind(titanic_test[,c("PassengerId","Pclass","Sex","Embarked")], titanic_test_transformed)
titanic_test_scaled$Pclass <- as.factor(titanic_test_scaled$Pclass)
set.seed(112233)
default_glm_mod = train(form = Survived ~ .,
data = titanic_train_scaled,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial")
default_glm_mod
set.seed(112233)
library(parallel)
no_cores <- detectCores() - 1
library(doParallel)
cl <- makePSOCKcluster(no_cores)
registerDoParallel(cl)
grid_default <- expand.grid(
nrounds = 100,
max_depth = 4,
eta = 0.025,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
train_control <- caret::trainControl(
method = "none",
verboseIter = FALSE, # no training log
allowParallel = TRUE # FALSE for reproducible results
)
xgb_base <- caret::train(
form = Survived ~ .,
data = titanic_train_scaled,
trControl = train_control,
tuneGrid = grid_default,
method = "xgbTree",
verbose = TRUE
)
stopCluster(cl)
xgb_base$bestTune
survived_pred_xgb <- predict(xgb_base, newdata = titanic_test_scaled)
survived_pred_xgb <- ifelse(survived_pred_xgb == 1, "0", "1")
xgb_default_to_kaggle <- data.frame(PassengerId=titanic_test_scaled$PassengerId,
Survived=survived_pred_xgb,
stringsAsFactors = TRUE)
write.csv(xgb_default_to_kaggle, file = "results/xgb_default.csv", row.names=FALSE, append = FALSE)
set.seed(112233)
library(parallel)
# Calculate the number of cores
no_cores <- detectCores() - 1
library(doParallel)
cl <- makePSOCKcluster(no_cores)
registerDoParallel(cl)
default_rf_mod <- train(form = Survived ~ .,
data = titanic_train_scaled,
method = "rf",
prox = TRUE)
stopCluster(cl)
default_rf_mod
survived_pred_rf <- predict(default_rf_mod, newdata = titanic_test_scaled)
survived_pred_rf <- ifelse(survived_pred_rf == 1, "0", "1")
rf_default_to_kaggle <- data.frame(PassengerId=titanic_test_scaled$PassengerId,
Survived=survived_pred_rf,
stringsAsFactors = TRUE)
write.csv(rf_default_to_kaggle, file = "results/rf_default.csv", row.names=FALSE, append = FALSE)
set.seed(112233)
library(parallel)
# Calculate the number of cores
no_cores <- detectCores() - 1
library(doParallel)
cl <- makePSOCKcluster(no_cores)
registerDoParallel(cl)
default_rfcv_mod <- train(form = Survived ~ .,
data = titanic_train_scaled,
method = "rf",
trControl= trainControl(method = "LOOCV", p = 0.1, allowParallel = TRUE),
prox = TRUE)
default_rfcv_mod
stopCluster(cl)
survived_pred_rfloocv <- predict(default_rf_mod, newdata = titanic_test_scaled)
survived_pred_rfloocv <- ifelse(survived_pred_rfloocv == 1, "0", "1")
rfloocv_default_to_kaggle <- data.frame(PassengerId=titanic_test_scaled$PassengerId,
Survived=survived_pred_rfloocv,
stringsAsFactors = TRUE)
write.csv(rfloocv_default_to_kaggle, file = "results/rf_loocv_default.csv", row.names=FALSE, append = FALSE)
knitr::opts_chunk$set(echo = TRUE)
set.seed(112233)
library(parallel)
# Calculate the number of cores
no_cores <- detectCores() - 1
library(doParallel)
cl <- makePSOCKcluster(no_cores)
registerDoParallel(cl)
default_rfcv_mod <- train(form = Survived ~ .,
data = titanic_train_scaled,
method = "rf",
trControl= trainControl(method = "LOOCV", p = 0.1, allowParallel = TRUE),
prox = TRUE)
stopCluster(cl)
default_rfcv_mod
survived_pred_glm <- predict(xgb_base, newdata = titanic_test_scaled)
survived_pred_glm <- ifelse(survived_pred_glm == 1, "0", "1")
glm_default_to_kaggle <- data.frame(PassengerId=titanic_test_scaled$PassengerId,
Survived=survived_pred_glm,
stringsAsFactors = TRUE)
write.csv(glm_default_to_kaggle, file = "results/glm_default.csv", row.names=FALSE, append = FALSE)
set.seed(112233)
library(parallel)
# Calculate the number of cores
no_cores <- detectCores() - 1
library(doParallel)
cl <- makePSOCKcluster(no_cores)
registerDoParallel(cl)
default_svm_linear <- train(form = Survived ~ .,
data = titanic_train_scaled,
method = "svmLinear",
trControl= trainControl(method = "repeatedcv", number=10, repeats = 3, allowParallel = TRUE),
tuneLength = 10)
stopCluster(cl)
default_svm_linear
survived_pred_svmLin <- predict(default_svm_linear, newdata = titanic_test_scaled)
survived_pred_svmLin <- ifelse(survived_pred_svmLin == 1, "0", "1")
svmlinear_default_to_kaggle <- data.frame(PassengerId=titanic_test_scaled$PassengerId,
Survived=survived_pred_svmLin,
stringsAsFactors = TRUE)
write.csv(svmlinear_default_to_kaggle, file = "results/svmlinear_default.csv", row.names=FALSE, append = FALSE)
set.seed(112233)
library(parallel)
# Calculate the number of cores
no_cores <- detectCores() - 1
library(doParallel)
cl <- makePSOCKcluster(no_cores)
registerDoParallel(cl)
default_svm_lsRadial <- train(form = Survived ~ .,
data = titanic_train_scaled,
method = "lssvmRadial",
trControl= trainControl(method = "repeatedcv", number=10, repeats = 3, allowParallel = TRUE),
tuneLength = 10)
stopCluster(cl)
default_svm_lsRadial
survived_pred_svmlsR <- predict(default_svm_lsRadial, newdata = titanic_test_scaled)
survived_pred_svmlsR <- ifelse(survived_pred_svmlsR == 1, "0", "1")
svm_lsradial_default_to_kaggle <- data.frame(PassengerId=titanic_test_scaled$PassengerId,
Survived=survived_pred_svmlsR,
stringsAsFactors = TRUE)
write.csv(svm_lsradial_default_to_kaggle, file = "results/svm_lsRadial_default.csv", row.names=FALSE, append = FALSE)
set.seed(112233)
library(parallel)
no_cores <- detectCores() - 1
library(doParallel)
cl <- makePSOCKcluster(no_cores)
registerDoParallel(cl)
bayes_glm <- train(form = Survived ~ .,
data = titanic_train_scaled,
trControl= trainControl(method = "repeatedcv", number=10, repeats = 3, allowParallel = TRUE),
method = "bayesglm")
stopCluster(cl)
bayes_glm
survived_pred_bayes_glm <- predict(bayes_glm, newdata = titanic_test_scaled)
survived_pred_bayes_glm <- ifelse(survived_pred_bayes_glm == 1, "0", "1")
bayes_glm_to_kaggle <- data.frame(PassengerId=titanic_test_scaled$PassengerId,
Survived=survived_pred_bayes_glm,
stringsAsFactors = TRUE)
write.csv(bayes_glm_to_kaggle, file = "results/bayes_glm.csv", row.names=FALSE, append = FALSE)
set.seed(112233)
library(parallel)
no_cores <- detectCores() - 1
library(doParallel)
cl <- makePSOCKcluster(no_cores)
registerDoParallel(cl)
LMT_model <- train(form = Survived ~ .,
data = titanic_train_scaled,
trControl= trainControl(method = "repeatedcv", number=10, repeats = 3, allowParallel = TRUE),
method = "LMT")
stopCluster(cl)
LMT_model
survived_pred_lmt<- predict(LMT_model, newdata = titanic_test_scaled)
survived_pred_lmt<- ifelse(survived_pred_lmt
== 1, "0", "1")
lmt_to_kaggle <- data.frame(PassengerId=titanic_test_scaled$PassengerId,
Survived=survived_pred_lmt,
stringsAsFactors = TRUE)
write.csv(lmt_to_kaggle, file = "results/lmt_default.csv", row.names=FALSE, append = FALSE)
knitr::opts_chunk$set(echo = TRUE)
unzip("data/titanic.zip", list = TRUE)
create_files <- function (fname,...) {
try(expr = read.csv(unzip(zipfile = ..., files = c(fname))),silent = TRUE);
}
extract_file_names <- function (names) {
setNames((unlist(strsplit(apply(names, MARGIN = c(1), function(r) r[1]), " "))), NULL)
}
create_df_from_zip_file <- function(file_name) {
if(file.exists(file_name)) {
files_from_kaggle <- unzip(file_name, list = TRUE)
names <- extract_file_names(files_from_kaggle)
dfs <- lapply(names, create_files, file_name)
dfs
}
}
dfs <- create_df_from_zip_file("data/titanic.zip")
if (dim(dfs[[1]])[2] == 2) { saveRDS(object = dfs[[3]], file = "data/sample_submission.rds")}
if (dim(dfs[[2]])[2] == 11) { saveRDS(object = dfs[[2]], file = "data/test.rds")}
if (dim(dfs[[3]])[2] == 12) { saveRDS(object = dfs[[3]], file = "data/train.rds")}
rm(dfs)
rm('create_files')
rm('extract_file_names')
rm('create_df_from_zip_file')
titanic_train <- readRDS("data/train.rds")
titanic_test <- readRDS("data/test.rds")
out1<-paste0("Train data is ", dim(titanic_train)[1], " rows by ", dim(titanic_train)[2], " columns")
out2<-paste0("Test data is ", dim(titanic_test)[1], " rows by ", dim(titanic_test)[2], " columns")
print(out1)
print(out2)
titanic_train_clean <- titanic_train[complete.cases(titanic_train), ]
dim(titanic_train_clean)
library(ggplot2)
theme_set(theme_classic())
g <- ggplot(titanic_train_clean, aes(x=Survived, y=Age, fill= Sex)) +
geom_bar(stat="identity", width = 0.75, position = "dodge") +
labs(title = "Bar plot for age and survivor status",subtitle = "Discriminated by gender")
plot(g)
knitr::include_graphics('./img/Rattle-KMeansclustering.png')
library(ggplot2)
theme_set(theme_classic())
g <- ggplot(titanic_train_clean, aes(Age)) +
geom_density(aes(fill=Sex), alpha=0.8) +
labs(title = "Density plot for Age",subtitle = "Discriminated by gender")
plot(g)
hist(titanic_train_clean$SibSp)
hist(titanic_train_clean$Parch)
hist(titanic_train_clean$Fare)
library(caret)
preObj <- preProcess(titanic_train_clean[,c("Age","SibSp","Parch","Fare")], method = c("center","scale", "BoxCox", "knnImpute"))
# sibsbstd <- predict(preObj, titanic_train_clean[,c(6,7,8,9)])$SibSp
titanic_train_transformed <- predict(preObj, newdata = titanic_train_clean[,c("Age","SibSp","Parch","Fare")])
titanic_train_scaled <- cbind(titanic_train_clean[,c("PassengerId","Pclass","Sex","Embarked", "Survived")], titanic_train_transformed)
titanic_train_scaled$Survived <- as.factor(titanic_train_scaled$Survived)
titanic_train_scaled$Pclass <- as.factor(titanic_train_scaled$Pclass)
titanic_test_transformed <- predict(preObj, titanic_test[,c("Age","SibSp","Parch","Fare")])
titanic_test_scaled <- cbind(titanic_test[,c("PassengerId","Pclass","Sex","Embarked")], titanic_test_transformed)
titanic_test_scaled$Pclass <- as.factor(titanic_test_scaled$Pclass)
set.seed(112233)
library(parallel)
no_cores <- detectCores() - 1
library(doParallel)
cl <- makePSOCKcluster(no_cores)
registerDoParallel(cl)
LMT_model <- train(form = Survived ~ .,
data = titanic_train_scaled,
trControl= trainControl(method = "repeatedcv", number=10, repeats = 3, allowParallel = TRUE),
method = "LMT")
stopCluster(cl)
LMT_model
survived_pred_lmt<- predict(LMT_model, newdata = titanic_test_scaled)
survived_pred_lmt<- ifelse(survived_pred_lmt
== 1, "0", "1")
lmt_to_kaggle <- data.frame(PassengerId=titanic_test_scaled$PassengerId,
Survived=survived_pred_lmt,
stringsAsFactors = TRUE)
write.csv(lmt_to_kaggle, file = "results/lmt_default.csv", row.names=FALSE)
set.seed(112233)
library(parallel)
no_cores <- detectCores() - 1
library(doParallel)
cl <- makePSOCKcluster(no_cores)
registerDoParallel(cl)
bayes_glm <- train(form = Survived ~ .,
data = titanic_train_scaled,
trControl= trainControl(method = "repeatedcv", number=10, repeats = 3, allowParallel = TRUE),
method = "bayesglm")
stopCluster(cl)
bayes_glm
survived_pred_bayes_glm <- predict(bayes_glm, newdata = titanic_test_scaled)
survived_pred_bayes_glm <- ifelse(survived_pred_bayes_glm == 1, "0", "1")
bayes_glm_to_kaggle <- data.frame(PassengerId=titanic_test_scaled$PassengerId,
Survived=survived_pred_bayes_glm,
stringsAsFactors = TRUE)
write.csv(bayes_glm_to_kaggle, file = "results/bayes_glm.csv", row.names=FALSE, append = FALSE)
set.seed(112233)
default_glm_mod = train(form = Survived ~ .,
data = titanic_train_scaled,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial")
set.seed(112233)
default_glm_mod = train(form = Survived ~ .,
data = titanic_train_scaled,
trControl= trainControl(method = "repeatedcv", number=10, repeats = 3, allowParallel = TRUE),
method = "glm",
family = "binomial")
rm(cl)
rm(q)
rm(g)
set.seed(112233)
library(parallel)
num_cores <- detectCores() - 1
library(doParallel)
cl <- makePSOCKcluster(num_cores)
registerDoParallel(cl)
LMT_model <- train(form = Survived ~ .,
data = titanic_train_scaled,
trControl= trainControl(method = "repeatedcv", number=10, repeats = 3, allowParallel = TRUE),
method = "LMT")
stopCluster(cl); registerDoSEQ()
LMT_model
set.seed(112233)
default_glm_mod = train(form = Survived ~ .,
data = titanic_train_scaled,
trControl= trainControl(method = "repeatedcv", number=10, repeats = 3, allowParallel = TRUE),
method = "glm",
family = "binomial")
default_glm_mod
savehistory("~/Documents/MasterOfSoftwareEng/Courses/Winter 2020/ENSF 611/Project/titanic/titanic.Rhistory")
